import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy


h_area = 1.0
D_penalti = 2.0
larguraCampo = 9.0
h_campo = 6.0
LarguraArea = 0.5
Intervalo_20ms = 0.02  
aceleracaoMaxima = 2.8  
velocidadeMaxima = 2.8  

velocidades_robo = []
aceleracoes_robo = []


with open("trajetoria_bola.dat", "r") as file:
  # Ignora a primeira linha (cabe√ßalho)
  next(file)

  b_trajetoria = numpy.array(
    # transforma todos os valores em Float trocando a virgula por ponto
    # Separa pelo caracter delimitador ( " espa√ßo ")
      [[float(value.replace(",", ".")) for value in line.split("\t")]
       for line in file])


robo_pos_inicial = numpy.array([
    float(input("Inicio em X: ")),
    float(input(" Inicio em Y: "))
])


rb_pos_atual = robo_pos_inicial
rb_velo = numpy.array([0.0 , 0.0])
rb_aceleracao = numpy.array([0.0 , 0.0])

#Criando o array base ( vazio ) de aceleracao da bola
b_aceleracao_x = numpy.zeros_like(b_trajetoria[:, 0])
b_aceleracao_y = numpy.zeros_like(b_trajetoria[:, 0])

for i in range(1, len(b_trajetoria)):
  # Usa a formula de Ponto inicio - ponto final / tempo inicio - tempo final ( 0.02)
   b_aceleracao_y[i] = (b_trajetoria[i, 2] -
                          b_trajetoria[i - 1, 2]) / Intervalo_20ms
  
   b_aceleracao_x[i] = (b_trajetoria[i, 1] -
                          b_trajetoria[i - 1, 1]) / Intervalo_20ms
 

trajetoria_robo = []

# Intercepta√ß√£o
for i in range(len(b_trajetoria)):
  # usamos a funcao linalg.norm para pegar as posi√ß√µes 1 e 2 do vetor
  # Ela tambem calcula o modulo ( Distancia ) dessas posi√ß√µes, A Raiz Quadrada dos quadrados das duas posi√ß√µes
  d = numpy.linalg.norm(rb_pos_atual - b_trajetoria[i, 1:3])
                                        # X e Y do array de trajetoria ( Come√ßa em 0)

  # Armazena a posi√ß√£o atual do rob√¥ na trajet√≥ria
  trajetoria_robo.append(numpy.copy(rb_pos_atual))

  # Velocidade Robo
  velocidades_robo.append(numpy.copy(rb_velo))

  # Aceleracao Robo
  aceleracoes_robo.append(numpy.copy(rb_aceleracao))

  # Calculo de dire√ß√£o Usando a formula de  ArcTangente( Py/Px) 
  direcao_aceleracao = numpy.arctan2(b_trajetoria[i, 2] - rb_pos_atual[1], b_trajetoria[i, 1] - rb_pos_atual[0])

  # Velocidade = Deslocamento / Diferen√ßa de Tempo
  # Calcula a velocidade da bola ( Ele pega o deslocamento de cada eixo X e Y e divide pelo 0.02)

  velocidade_bola = numpy.array(   
        [
        # Eixo X
        (b_trajetoria[i, 1] - b_trajetoria[i - 1, 1]) / Intervalo_20ms if i > 0 else 0.0,
        # Eixo Y
        (b_trajetoria[i, 2] - b_trajetoria[i - 1, 2]) / Intervalo_20ms  if i > 0 else 0.0
        ]
    )


  # Tempo para interceptar os dois = Calcula o M√≥dulo ( Distancia) dos pontos ( x , y ) da bola e robo /  Velocidade maxima 
  tempo_para_interceptar = numpy.linalg.norm(b_trajetoria[i, 1:3] - rb_pos_atual) / velocidadeMaxima
  # Consegue o ponto futuro ( Posi√ß√£o atual + velocidade atual + tempo_para_interceptar) 
  ponto_intersecao = b_trajetoria[i, 1:3] + velocidade_bola * tempo_para_interceptar

  # Calcula a dire√ß√£o para o ponto de interse√ß√£o
  direcao_intersecao = ponto_intersecao - rb_pos_atual
  # Conseguindo um vetor unitario
  direcao_intersecao /= numpy.linalg.norm(direcao_intersecao)


  # Ajustando a velocidade pela quantidade de vetor unitario
  velocidade_desejada = direcao_intersecao * velocidadeMaxima
  # Ajusta o valor da acelera√ß√£o
  robo_aceleracao = (velocidade_desejada - robo_velocidade) / Intervalo_20ms

  # Limita os valores de acelera√ß√£o maxima e minima
  robo_aceleracao = numpy.clip(robo_aceleracao, -aceleracaoMaxima, aceleracaoMaxima)

  # Ajustando velocidade do robo
  robo_velocidade +=  robo_aceleracao * Intervalo_20ms

  # Limita os valores de velocidade maxima e minima
  robo_velocidade = numpy.clip(robo_velocidade, -velocidadeMaxima, velocidadeMaxima)

  # Atualiza a posi√ß√£o do rob√¥
  rb_pos_atual += robo_velocidade * Intervalo_20ms


  # Verifica se o rob√¥ ( raio ) interceptou a bola < 8.0
  if numpy.linalg.norm(rb_pos_atual - ponto_intersecao) < 8.0:
    break

# Fun√ß√£o para adicionar a equa√ß√£o no gr√°fico, essa fun√ß√£o ser√° chamada, em outras partes receber√° arguementos e gerar√° equa√ß√µes ao gr√°fico a partir dos arguementos que forem passados.
def add_equation(ax, equation, x, y):
  # Adiciona uma equa√ß√£o ao gr√°fico nas coordenadas (x, y)
  ax.annotate(equation, (x, y),  
              # Define a posi√ß√£o do texto da equa√ß√£o em rela√ß√£o √†s coordenadas especificadas
              xytext=(10, -20),   
              # Indica que as coordenadas do texto s√£o medidas em pontos
              textcoords='offset points',  
              # Define as propriedades da seta que aponta para a equa√ß√£o
              arrowprops=dict(arrowstyle="->", color='black'))  

# Bloco e c√≥digo para gerar o Gr√°fico 1 que √© a Dist√¢ncia relativa ùëë entre o rob√¥ e a bola como fun√ß√£o do tempo ùë°
# np.range, sendo usado para criar uma sequencia de tempo
# O tempo √© calculado de 0 at√© o comprimento da trajet√≥ria do rob√¥ multiplicado pelo intervalo de amostragem dt, com intervalo de tempo dt. o 0 passado como argumento √© o ponto inicial da sequencia, o argumento seguinte √© o ponto final (dt intervalo de tempo entre cada amostra de espa√ßo percorrido, multiplicado pelo n√∫mero de amostras de espa√ßo percorrido pelo rob√¥) e o dt √© o espa√ßamento entre cada ponto.
tempo = np.arange(0, len(trajetoria_robo) * dt, dt)

#calculo da dist√¢ncia relativa entre o rob√¥ e a bola em cada ponto do tempo.
#np.linalg.norm para calcula a norma euclidiana entre as coordenadas do rob√¥ e da bola.
# Para isso, subtra√≠ as coordenadas da trajet√≥ria do rob√¥ das coordenadas da trajet√≥ria da bola.
# [:len(trajetoria_robo), 1:3] √© utilizado para garantir que ambas as trajet√≥rias tenham o mesmo comprimento.
distancia_relativa = np.linalg.norm(
    trajetoria_robo - trajetoria_bola[:len(trajetoria_robo), 1:3], axis=1)

fig, ax = plt.subplots(figsize=(10, 6)) #essa linha cria uma figura em um conjunto de eixos e especifica o seu tamanho
ax.plot(tempo, distancia_relativa, label="Dist√¢ncia Relativa", color="red") #Essa plota a dist√¢ncia relativa em fun√ß√£o do tempo, e define a cor da linha e legenda
ax.set_title("Dist√¢ncia Relativa entre o Rob√¥ e a Bola em Fun√ß√£o do Tempo") #titulo do gr√°fico
ax.set_xlabel("Tempo (s)") #r√≥tulo do eixo
ax.set_ylabel("Dist√¢ncia (m)") #r√≥tulo do outro eixo

# Esse bloco de c√≥digo inteiro Adiciona uma equa√ß√£o no gr√°fico
equacao1 = r'$d = \sqrt{(x_{\mathrm{robo}} - x_{\mathrm{bola}})^2 + (y_{\mathrm{robo}} - y_{\mathrm{bola}})^2}$' #Essa linha cria uma vari√°vel de equa√ß√£o1 e atribui a ela uma equa√ß√£o matem√°tica que calcula a dist√¢ncia d entre rob√¥ e bola, dist√¢ncia entre 2 pontos em um plano bidimensional, essa f√≥rmula √© a dist√¢ncia euclidiana entre dois pontos. que √© a raiz quadrada da soma dos quadrados da diferen√ßa entre x do rob√¥ e x da bola e y do r√¥bo e y da bola. e format√° o jeito que ela tem que ser visualizada.
#essa parte toda adiciona uma anota√ß√£o, onde a equa√ß√£o ficar√° no gr√°fico, e define sua posi√ß√£o e outras configura√ß√µes
ax.annotate(equacao1, (0.30, 0.92), 
            xycoords='axes fraction',
            fontsize=10,
            color='black')

#esse bloco inteiro adiciona ao gr√°fico o valor final da dist√¢ncia
valor_final_distancia = distancia_relativa[-1] #essa linha atribui a uma vari√°vel o ultimo elemento da array distancia_relativa, que √© a dist√¢ncia relativa entre bola e rob√¥ ao longo do tempo.
#toda essa parte em seguida adiciona um texto no gr√°fica, contendo os elementos de tempo, o valor da vari√°vel atribuida anteriormente e as configura√ß√µes de posi√ß√£o e cor.
ax.text(tempo[-1],
        valor_final_distancia,
        f'{valor_final_distancia:.2f} m',
        ha='right',
        va='bottom')
            


            color='black')

ax.legend() #adiciona uma legenda ao gr√°fico
plt.show() #exibe o gr√°fico na tela


# Bloco e c√≥digo para gerar o Gr√°fico 2 que √© a Trajet√≥rias da bola e do rob√¥ em um plano ùë•ùë¶, at√© o ponto de intercepta√ß√£o
fig, ax = plt.subplots(figsize=(10, 6))  #essa linha cria uma figura em um conjunto de eixos e especifica o seu tamanho
# Essa parte plota a trajet√≥ria da bola no plano XY, pega as duas matrizes que correspondem as posi√ß√µes x e y da bola, e adicionauma legenda e suas configura√ß√µes.
ax.plot(trajetoria_bola[:, 1],
        trajetoria_bola[:, 2],
        label="Trajet√≥ria da Bola",
        color="blue",
        linewidth=2)
# Essa parte plota a trajet√≥ria do rob√¥ no plano XY, pega as duas matrizes que correspondem as posi√ß√µes x e y do rob√¥, e adiciona uma legenda e suas configura√ß√µes.
ax.plot(trajetoria_robo[:, 0],
        trajetoria_robo[:, 1],
        label="Trajet√≥ria do Rob√¥",
        linestyle="--",
        color="orange",
        linewidth=2)
# essa parte define o titulo do gr√°fico e as medidas nos eixos em metros
ax.set_title("Trajet√≥rias da Bola e do Rob√¥ no Plano XY at√© a Intercepta√ß√£o")
ax.set_xlabel("Posi√ß√£o X (m)")
ax.set_ylabel("Posi√ß√£o Y (m)")

# Todo esse bloco de c√≥digo adiciona texto aos gr√°ficos para ajudar a visualizar no gr√°fico onde bola e rob√¥ come√ßam e terminam suas trajet√≥rias, os textos indica posi√ß√£o inicial e final da bola e do rob√¥.
ax.text(trajetoria_bola[0, 1], #coordenadas X inicial da bola
        trajetoria_bola[0, 2], #coordenadas Y inicial da bola
        'Inicial Bola', # texto que ser√° exibido no gr√°fico
        ha='right',
        va='bottom')
ax.text(trajetoria_robo[0, 0], #coordenadas X inicial do rob√¥
        trajetoria_robo[0, 1], #coordenadas X inicial do rob√¥
        'Inicial Rob√¥', # texto que ser√° exibido no gr√°fico
        ha='right',
        va='bottom')

ax.text(trajetoria_bola[-1, 1], #coordenadas X final da bola
        trajetoria_bola[-1, 2], #coordenadas Y final da bola
        'Final Bola', # texto que ser√° exibido no gr√°fico
        ha='right',
        va='bottom')
ax.text(trajetoria_robo[-1, 0], #coordenadas X final do rob√¥
        trajetoria_robo[-1, 1], #coordenadas Y final da rob√¥
        'Final Rob√¥', #texto que ser√° exibido no gr√°fico
        ha='right',
        va='bottom')

ax.legend() #adiciona uma legenda ao gr√°fico
plt.show() #exibe o gr√°fico na tela





